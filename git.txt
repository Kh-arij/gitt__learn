
KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ touch index.html

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ touch third.txt

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git init
Reinitialized existing Git repository in C:/Users/KHALDI/Desktop/gitt__learn/.git/

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git add .

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git commit -m "adding third.txt"
[master (root-commit) f9a4871] adding third.txt
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 index.html
 create mode 100644 third.txt

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git status
On branch master
nothing to commit, working tree clean

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git log
commit f9a487192b3ef167eeb0f246d7a53951b3ab8f9b (HEAD -> master)
Author: Arij <khaldi.arij9@gmail.com>
Date:   Mon Mar 22 22:27:17 2021 +0100

    adding third.txt

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ touch fourth.txt

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git add fourth.txt

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git commit -m "adding fourth.txt"
[master a959850] adding fourth.txt
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 fourth.txt

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git rm third.txt
rm 'third.txt'

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git add .

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git commit -m "removing third.txt"
[master 23b9e19] removing third.txt
 1 file changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 third.txt

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git log
commit 23b9e19ceb4670b08fadac79c9a06b6dcd6059ab (HEAD -> master)
Author: Arij <khaldi.arij9@gmail.com>
Date:   Mon Mar 22 22:33:19 2021 +0100

    removing third.txt

commit a959850497f562acd36e7326416fa655e6f43112
Author: Arij <khaldi.arij9@gmail.com>
Date:   Mon Mar 22 22:31:04 2021 +0100

    adding fourth.txt

commit f9a487192b3ef167eeb0f246d7a53951b3ab8f9b
Author: Arij <khaldi.arij9@gmail.com>
Date:   Mon Mar 22 22:27:17 2021 +0100

    adding third.txt

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ git config --global
usage: git config [<options>]

Config file location
    --global              use global config file
    --system              use system config file
    --local               use repository config file
    --worktree            use per-worktree config file
    -f, --file <file>     use given config file
    --blob <blob-id>      read config from given blob object

Action
    --get                 get value: name [value-pattern]
    --get-all             get all values: key [value-pattern]
    --get-regexp          get values for regexp: name-regex [value-pattern]
    --get-urlmatch        get value specific for the URL: section[.var] URL
    --replace-all         replace all matching variables: name value [value-pattern]
    --add                 add a new variable: name value
    --unset               remove a variable: name [value-pattern]
    --unset-all           remove all matches: name [value-pattern]
    --rename-section      rename section: old-name new-name
    --remove-section      remove a section: name
    -l, --list            list all
    --fixed-value         use string equality when comparing values to 'value-pattern'
    -e, --edit            open an editor
    --get-color           find the color configured: slot [default]
    --get-colorbool       find the color setting: slot [stdout-is-tty]

Type
    -t, --type <>         value is given this type
    --bool                value is "true" or "false"
    --int                 value is decimal number
    --bool-or-int         value is --bool or --int
    --bool-or-str         value is --bool or string
    --path                value is a path (file or directory name)
    --expiry-date         value is an expiry date

Other
    -z, --null            terminate values with NUL byte
    --name-only           show variable names only
    --includes            respect include directives on lookup
    --show-origin         show origin of config (file, standard input, blob, command line)
    --show-scope          show scope of config (worktree, local, global, system, command)
    --default <value>     with --get, use default value when missing entry


KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
$ ^C

KHALDI@DESKTOP-VQ404QG MINGW64 ~/Desktop/gitt__learn (master)
